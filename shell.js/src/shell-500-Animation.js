// Generated by CoffeeScript 1.6.2
var AnimationLayer,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

AnimationLayer = (function(_super) {
  var random;

  __extends(AnimationLayer, _super);

  function AnimationLayer(surface, id, handler) {
    this.surface = surface;
    this.id = id;
    this.handler = handler != null ? handler : function() {};
    this.animation = this.surface.surface.animations[this.id];
    this.patterns = this.animation.patterns;
    this.interval = this.getInterval();
    this.playing = false;
    this.none = document.createElement("canvas");
    this.none.width = this.none.height = 1;
    this.frame = this.none;
    this.i = 0;
    this.wait = 0;
    this.count = 0;
  }

  AnimationLayer.prototype.getInterval = function() {
    switch (this.animation.interval) {
      case "sometimes":
        return random(2);
      case "rarely":
        return random(4);
      case "runonce":
        if (this.count === 0) {
          return 0;
        } else {
          return Infinity;
        }
      case "always":
        return 0;
      default:
        return Infinity;
    }
  };

  AnimationLayer.prototype.getFrame = function(now) {
    var id;

    if (this.playing) {
      if (now > this.wait) {
        id = Number(this.patterns[this.i].surfaceID);
        if (id === -1) {
          this.frame = this.none;
        } else {
          this.frame = this.surface.shell.surfaces.surface[id].base;
        }
        this.wait = now + this.patterns[this.i].wait;
        this.i++;
        if (this.patterns[this.i] == null) {
          this.i = 0;
          this.playing = false;
          this.interval = now + this.getInterval();
          this.count++;
          this.handler();
        }
      }
    } else if (now > this.interval) {
      this.playing = true;
    }
    return {
      cnv: this.frame,
      x: this.patterns[this.i].x,
      y: this.patterns[this.i].y,
      cmp: this.patterns[this.i].compositeOperation
    };
  };

  random = function(n) {
    var ms;

    ms = 0;
    while (1 / n < Math.random()) {
      ms++;
    }
    return ms * 1000;
  };

  return AnimationLayer;

})(Root);
