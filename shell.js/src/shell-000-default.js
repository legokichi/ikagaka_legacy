// Generated by CoffeeScript 1.6.3
"use strict";
var Root, copy, difference, error, extend, has, isArray, isCanvas, isFunction, isImage, isNumber, isObject, isPrimitive, overwrite, unique;

isPrimitive = function(a) {
  switch (typeof a) {
    case "number":
      return true;
    case "string":
      return true;
    case "boolean":
      return true;
    case "undefined":
      return true;
    case "null":
      return true;
    default:
      return false;
  }
};

isNumber = function(num) {
  return isFinite(Number(num));
};

isObject = function(obj) {
  return Object.prototype.toString.apply(obj) === "[object Object]";
};

isArray = function(ary) {
  return Array.isArray(ary);
};

isFunction = function(fn) {
  return Object.prototype.toString.apply(fn) === "[object Function]";
};

isImage = function(img) {
  return Object.prototype.toString.apply(img) === "[object HTMLImageElement]";
};

isCanvas = function(cnv) {
  return Object.prototype.toString.apply(cnv) === "[object HTMLCanvasElement]";
};

extend = function(a, b) {
  var key, val;
  for (key in b) {
    val = b[key];
    if (b.hasOwnProperty(key)) {
      a[key] = val;
    }
  }
  return a;
};

overwrite = function(a, b) {
  var key, val;
  for (key in b) {
    val = b[key];
    if (b.hasOwnProperty(key)) {
      if (isPrimitive(val) || (a[key] == null)) {
        a[key] = val;
      } else {
        overwrite(a[key], val);
      }
    }
  }
  return a;
};

copy = function(a) {
  var key, o, val;
  if (isPrimitive(a)) {
    return a;
  } else if (Array.isArray(a)) {
    o = [];
  } else if (a.constructor != null) {
    o = Object.create(a.constructor.prototype);
  } else {
    o = {};
  }
  for (key in a) {
    val = a[key];
    if (a.hasOwnProperty(key)) {
      if (isPrimitive(val)) {
        o[key] = val;
      } else {
        o[key] = copy(val);
      }
    }
  }
  return o;
};

has = function(a, b) {
  var key, val;
  for (key in a) {
    val = a[key];
    if (val === b) {
      return true;
    }
  }
  return false;
};

unique = function(a) {
  var rslts, seens, val, _i, _len;
  rslts = [];
  seens = [];
  for (_i = 0, _len = a.length; _i < _len; _i++) {
    val = a[_i];
    if (has(seens, val)) {
      break;
    }
    seens.push(val);
    rslts.push(val);
  }
  return rslts;
};

difference = function(a, b) {
  return a.filter(function(val) {
    return !has(b, val);
  });
};

error = function(e) {
  console.error(e);
  throw e;
};

Root = (function() {
  function Root() {
    this.type = /function\s?([^\(]+)/.exec(this.constructor.toString())[1];
  }

  Root.prototype.destructor = function() {
    var key;
    for (key in this) {
      if (this.hasOwnProperty(key)) {
        this[key] = null;
      }
    }
    return void 0;
  };

  Root.prototype.copy = function() {
    return copy(this);
  };

  Root.prototype.extend = function(a) {
    return extend(this, a);
  };

  Root.prototype.log = function() {
    console.log(this);
    return this;
  };

  Root.prototype.dir = function() {
    console.dir(this);
    return this;
  };

  Root.prototype["do"] = function(fn) {
    return fn.call(this);
  };

  return Root;

})();
